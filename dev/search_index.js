var documenterSearchIndex = {"docs":
[{"location":"getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Experimenter.jl is a package that is designed to help you keep track of your experiments and their results. It is built to work with Distributed.jl for parallel writing of results to a SQLite database file.","category":"page"},{"location":"getting_started/#Opening-the-database","page":"Getting Started","title":"Opening the database","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"To get started, first import the library with:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Experimenter\n````\nAfter this one needs to create a database to store the results:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"julia db = open_db(\"experiments.db\")","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"One can always supply a given directory for the database as well, for example:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"julia db = open_db(\"experiments.db\", joinpath(pwd(), \"results\"))","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The first call to `open_db` will check if a file already exists. If the file does not exist, `Experimenter.jl` will create the file and the schema for the database.\n\n## Defining the work we want to process\n\nTo run an experiment we need to first define a function which runs our experiment:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"julia","category":"page"},{"location":"getting_started/#in-run.jl","page":"Getting Started","title":"in run.jl","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Random function runtrial(config::Dict{Symbol,Any}, trialid)     results = Dict{Symbol, Any}()     sigma = config[:sigma]     N = config[:N]     seed = config[:seed]     rng = Random.Xoshiro(seed)     # Perform some calculation     results[:distance] = sum(rand(rng) * sigma for _ in 1:N)     # Must return a Dict{Symbol, Any}, with the data we want to save     return results end","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"## Creating an experiment\n\nNow we can define a configuration for our experiment:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"julia","category":"page"},{"location":"getting_started/#in-a-script","page":"Getting Started","title":"in a script","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"config = Dict{Symbol,Any}(     :N => IterableVariable([10, 20])     :seed => IterableVariable([1234, 4321])     :sigma => 1.0 )","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"This is just a dictionary, with some special wrappers `IterableVariable` for some of the config values. When we create our experiment, we pass in this configuration and the path to the file with the function to run our experiment:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"julia experiment = Experiment(     name=\"Test Experiment\",     includefile=\"run.jl\",     functionname=\"run_trial\",     configuration=deepcopy(config) )","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"\n## Examining the trials of an experiment\nWe can look at the set of trials this experiment will create:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"julia for trial in experiment     println(trial.configuration) end","category":"page"},{"location":"getting_started/#..-or","page":"Getting Started","title":".. or","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"trials = collect(experiment)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"There are multiple trials in this experiment as we used an `IterableVariable` wrapper, which says that we want to run a grid search over these specific variables.\n\n## Executing an experiment\n\nTo execute our experiment, we use the `@execute` macro. To execute the experiment serially:\n","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"julia @execute experiment db SerialMode","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"\nInstead of `SerialMode`, we can use `ThreadedMode` to execute via `Threads.@threads`, or use `DistributedMode` to execute via a `pmap` and run across different workers.\n\n## Getting the results\n\nOnce the experiments are completed, we can run:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"julia trials = gettrialsby_name(db, \"Test Experiment\");","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"\nThis will return a `Vector{Trial}`, where `Trial` has a `results` field which is the dictionary we returned from the `run_trial` function. To get the results we write:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"julia results = [t.results for t in trials]","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"\n## Re-running failed trials\n\nIf a trial did not finish, then the `results` field will be missing. Whenever we run the `@execute` macro, it will skip any trial that already has results, and only run the next trials. Therefore ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"julia @execute experiment db SerialMode ``` will not run any more trials, as they have already been completed. However, if the execution stopped (for example killed by the SLURM scheduler due to wall time), then it will only run the trials that have not been completed.","category":"page"},{"location":"getting_started/#Saving-part-way","page":"Getting Started","title":"Saving part way","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"If your trials take a long time to finish and may be cancelled during their run, you can always implement a way to save a Snapshot, which allows you to save data you need to restore a trial part way through running. The API for this has not yet been documented, but examples can be seen in the unit tests.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Experimenter","category":"page"},{"location":"#Experimenter","page":"Home","title":"Experimenter","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Experimenter. Head over to Getting Started to get an overview of this package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Experimenter]","category":"page"},{"location":"#Experimenter.Experiment","page":"Home","title":"Experimenter.Experiment","text":"Experiment\n\nA database object for storing the configuration options of an experiment.\n\nThe signature of the function supplied should be:\n\nfn(configuration::Dict{Symbol, Any}, trial_id::UUID)\n\nThe function should be available when including the file provided.\n\nA name is required to uniquely label this experiment.\n\n\n\n\n\n","category":"type"},{"location":"#Experimenter.count_values-Tuple{Any}","page":"Home","title":"Experimenter.count_values","text":"count_values(entry)\n\nCounts the number of different values which 'variable' can take.\n\n\n\n\n\n","category":"method"},{"location":"#Experimenter.extract_value-Tuple{Any, Any}","page":"Home","title":"Experimenter.extract_value","text":"extract_value(variable, i)\n\nReturns the i^th possible value of 'variable'.  'i' follows 1 based indexing.\n\n\n\n\n\n","category":"method"},{"location":"#Experimenter.merge_databases!-Tuple{Experimenter.ExperimentDatabase, Experimenter.ExperimentDatabase}","page":"Home","title":"Experimenter.merge_databases!","text":"merge_databases!(primary_db, secondary_db)\n\nSearches all of the records from the secondary database and adds them to the first database.\n\n\n\n\n\n","category":"method"}]
}
